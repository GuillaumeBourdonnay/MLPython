from rest_framework import serializers 
from prediction.models import Incident

class IncidentSerializer(serializers.Serializer):
	number                               = serializers.FloatField()
	active                               = serializers.FloatField()
	reassignment_count                   = serializers.FloatField()
	reopen_count                         = serializers.FloatField()
	sys_mod_count                        = serializers.FloatField()
	made_sla                             = serializers.FloatField()
	caller_id                            = serializers.FloatField()
	opened_by                            = serializers.FloatField()
	sys_created_by                       = serializers.FloatField()
	sys_updated_by                       = serializers.FloatField()
	location                             = serializers.FloatField()
	category                             = serializers.FloatField()
	subcategory                          = serializers.FloatField()
	u_symptom                            = serializers.FloatField()
	impact                               = serializers.FloatField()
	urgency                              = serializers.FloatField()
	priority                             = serializers.FloatField()
	assignment_group                     = serializers.FloatField()
	assigned_to                          = serializers.FloatField()
	knowledge                            = serializers.FloatField()
	u_priority_confirmation              = serializers.FloatField()
	closed_code                          = serializers.FloatField()
	resolved_by                          = serializers.FloatField()
	opened_at_TS                         = serializers.FloatField()
	sys_updated_at_TS                    = serializers.FloatField()
	sys_created_at_TS                    = serializers.FloatField()
	sys_updated_at_weekend               = serializers.FloatField()
	incident_state_Active                = serializers.FloatField()
	incident_state_Awaiting_Evidence     = serializers.FloatField()
	incident_state_Awaiting_Problem      = serializers.FloatField()
	incident_state_Awaiting_User_Info    = serializers.FloatField()
	incident_state_Awaiting_Vendor       = serializers.FloatField()
	incident_state_Closed                = serializers.FloatField()
	incident_state_New                   = serializers.FloatField()
	incident_state_Resolved              = serializers.FloatField()
	resolved_at_TS                       = serializers.FloatField(allow_null =  True)

def create(self, validated_data):
	"""Create and return a new `Incident` instance, given the validated data."""
	return Incident.objects.create(**validated_data)

def update(self, instance, validated_data):
	"""Update and return an existing `Incident` instance, giventhe validateddata."""
	instance.number                               = validated_data.get('number', instance.number)
	instance.active                               = validated_data.get('active', instance.active)
	instance.reassignment_count                   = validated_data.get('reassignment_count', instance.reassignment_count)
	instance.reopen_count                         = validated_data.get('reopen_count', instance.reopen_count)
	instance.sys_mod_count                        = validated_data.get('sys_mod_count', instance.sys_mod_count)
	instance.made_sla                             = validated_data.get('made_sla', instance.made_sla)
	instance.caller_id                            = validated_data.get('caller_id', instance.caller_id)
	instance.opened_by                            = validated_data.get('opened_by', instance.opened_by)
	instance.sys_created_by                       = validated_data.get('sys_created_by', instance.sys_created_by)
	instance.sys_updated_by                       = validated_data.get('sys_updated_by', instance.sys_updated_by)
	instance.location                             = validated_data.get('location', instance.location)
	instance.category                             = validated_data.get('category', instance.category)
	instance.subcategory                          = validated_data.get('subcategory', instance.subcategory)
	instance.u_symptom                            = validated_data.get('u_symptom', instance.u_symptom)
	instance.impact                               = validated_data.get('impact', instance.impact)
	instance.urgency                              = validated_data.get('urgency', instance.urgency)
	instance.priority                             = validated_data.get('priority', instance.priority)
	instance.assignment_group                     = validated_data.get('assignment_group', instance.assignment_group)
	instance.assigned_to                          = validated_data.get('assigned_to', instance.assigned_to)
	instance.knowledge                            = validated_data.get('knowledge', instance.knowledge)
	instance.u_priority_confirmation              = validated_data.get('u_priority_confirmation', instance.u_priority_confirmation)
	instance.closed_code                          = validated_data.get('closed_code', instance.closed_code)
	instance.resolved_by                          = validated_data.get('resolved_by', instance.resolved_by)
	instance.opened_at_TS                         = validated_data.get('opened_at_TS', instance.opened_at_TS)
	instance.sys_updated_at_TS                    = validated_data.get('sys_updated_at_TS', instance.sys_updated_at_TS)
	instance.sys_created_at_TS                    = validated_data.get('sys_created_at_TS', instance.sys_created_at_TS)
	instance.sys_updated_at_weekend               = validated_data.get('sys_updated_at_weekend', instance.sys_updated_at_weekend)
	instance.incident_state_Active                = validated_data.get('incident_state_Active', instance.incident_state_Active)
	instance.incident_state_Awaiting_Evidence     = validated_data.get('incident_state_Awaiting_Evidence', instance.incident_state_Awaiting_Evidence)
	instance.incident_state_Awaiting_Problem      = validated_data.get('incident_state_Awaiting_Problem', instance.incident_state_Awaiting_Problem)
	instance.incident_state_Awaiting_User_Info    = validated_data.get('incident_state_Awaiting_User_Info', instance.incident_state_Awaiting_User_Info)
	instance.incident_state_Awaiting_Vendor       = validated_data.get('incident_state_Awaiting_Vendor', instance.incident_state_Awaiting_Vendor)
	instance.incident_state_Closed                = validated_data.get('incident_state_Closed', instance.incident_state_Closed)
	instance.incident_state_New                   = validated_data.get('incident_state_New', instance.incident_state_New)
	instance.incident_state_Resolved              = validated_data.get('incident_state_Resolved', instance.incident_state_Resolved)
	instance.save()
	return instance